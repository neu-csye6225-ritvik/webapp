name: Packer Build on PR Merge

on:
  push:
    branches:
      - main

jobs:
  packer_build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name:  env file
      run: |
        touch .env
          
        echo NODE_ENV=${{ vars.NODE_ENV }} >> .env
        echo DB_NAME=${{ secrets.PGDATABASE }} >> .env
        echo DB_USER=${{ secrets.PGUSER }} >> .env
        echo DB_PASSWORD=${{ secrets.PGPASSWORD }} >> .env
        echo DB_PORT=${{ secrets.PGPORT }} >> .env
        echo DB_HOST=${{ secrets.PGHOST }} >> .env
        echo DB_DIALECT=${{ secrets.DB_DIALECT }} >> .env
        echo APP_PORT=${{ vars.APP_PORT }} >> .env
        echo AWS_REGION=${{ vars.AWS_REGION }} >> .env
        
        echo PROFILE=${{ vars.PROFILE }} >> .env
        echo AMI_DESCRIPTION=${{ vars.AMI_DESCRIPTION }} >> .env
        echo INSTANCE_TYPE=${{ vars.INSTANCE_TYPE }} >> .env
        echo AMI_SOURCE_NAME=${{ vars.AMI_SOURCE_NAME }} >> .env
        echo AMI_SOURCE_DEVICE_TYPE=${{ vars.AMI_SOURCE_DEVICE_TYPE }} >> .env
        echo AMI_SOURCE_VIRTUALIZATION=${{ vars.AMI_SOURCE_VIRTUALIZATION }} >> .env
        echo DEVICE_NAME=${{ vars.DEVICE_NAME }} >> .env
        echo VOLUME_SIZE=${{ vars.VOLUME_SIZE }} >> .env
        echo VOLUME_TYPE=${{ vars.VOLUME_TYPE }} >> .env 
        echo "cat .env"
        cat .env

    - name: Zip Web App
      run: zip -r webapp.zip ../webapp


    - name: Set up Packer
      run: |
        wget https://releases.hashicorp.com/packer/1.8.3/packer_1.8.3_linux_amd64.zip
        unzip packer_1.8.3_linux_amd64.zip
        chmod +x packer
        sudo mv packer /usr/local/bin/
      shell: bash

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Install Packer
      run: |
        wget https://releases.hashicorp.com/packer/1.7.2/packer_1.7.2_linux_amd64.zip
        unzip packer_1.7.2_linux_amd64.zip
        chmod +x packer
        mv packer /usr/local/bin
      shell: bash

    - name: Run packer init
      run: packer init aws.debian.pkr.hcl
    
    - name: Run `packer Build`
      id: packer_build
      run: |
        echo "Running packer build"
        packer build aws.debian.pkr.hcl

    # - name: Fetch Latest launch template version
    #   run: |
    #     aws ec2 describe-launch-templates --no-cli-pager \
    #     --launch-template-names webapp-launch-template \
    #     --query 'LaunchTemplates[0].LatestVersionNumber' \
    #     --output text > version.txt

    # - name: Set Launch Template Version
    #   run: |
    #     export LAUNCH_TEMPLATE_VERSION=$(cat version.txt)
    #     echo "LAUNCH_TEMPLATE_VERSION=$LAUNCH_TEMPLATE_VERSION" >> $GITHUB_ENV
        
    # - name: Update Launch Template
    #   run: |
    #     AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
    #     echo AMI_ID used: $AMI_ID
    #     aws ec2 create-launch-template-version --no-cli-pager \
    #     --launch-template-data '{"ImageId":"$AMI_ID"}' \
    #     --source-version 1
    #     --launch-template-name "ec2launchTemp-fcec096"

    # - name: autoscaling group instance refresh
    #   run: |
    #     aws autoscaling start-instance-refresh \
    #     --auto-scaling-group-name="asg_launch_config_ami" \
    #     --preferences '{"MinHealthyPercentage": 100}' \
    #     --strategy=Rolling --no-cli-pager

    - name: launch and update asg
      run: |
        IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
        echo IMAGE_ID used: $IMAGE_ID
        ASG_NAME=${{ vars.ASG_NAME }}
        LAUNCH_CONFIG=${{ vars.LAUNCH_TEMPLATE_NAME }}
        aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data "ImageId=$IMAGE_ID"
        TEMPLATE_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name="$LAUNCH_CONFIG" \
          --filters="Name=is-default-version,Values=false" \
          --query 'sort_by(LaunchTemplateVersions, &CreateTime)[-1].[VersionNumber]' --output text)
        aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
          --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version=$TEMPLATE_VERSION
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME --strategy Rolling
        printf "Instance refresh in progress"
        while true;
        do
          instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
            --query "InstanceRefreshes[0].Status" --output text)
          if [ "$instance_refresh_status" = "Successful" ]; then
            printf "\nInstance refresh successful!"
            break
          fi
          if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
            printf "\nInstance refresh failed!"
            exit 1
          fi
          echo -ne "."
          sleep 10
        done